# 自定义插件属性描述文件，工具根据本描述文件生产类的监控插件
## 定义插件作者
plugin.author=yinbp

## 定义插件版本号
plugin.version=1.9.0-SNAPSHOT
## 定义插件名称
plugin.name=bbosselastic

## 定义插件服务名称
plugin.serviceName=BBossElastic

## 定义插件程序对应的类路径
plugin.package=com.navercorp.pinpoint.plugin.bbosselastic

## 定义插件对应的服务类型代码，serviceType需要向开发组申请，必须保持全局唯一,并且是short类型的数字
## UNDEFINED_CATEGORY((short)-1, (short)-1),
#    PINPOINT_INTERNAL((short)0, (short)999),
#    SERVER((short)1000, (short)1999),
#    DATABASE((short)2000, (short)2999),
#    LIBRARY((short)5000, (short)7999),
#    CACHE_LIBRARY((short)8000, (short)8999, BaseHistogramSchema.FAST_SCHEMA),
#    RPC((short)9000, (short)9999);
##
plugin.serviceType=1027
## 参数key，需要向开发组申请，必须保持全局唯一,并且是short类型的数字
plugin.argKeyCode=911
plugin.argKeyName=args_911
## 定义默认是否启用插件
profiler.enable=true

## 定义是否采集被监控类方法的返回数据，返回数据中包含对象时，请自行提供对象的toString()方法，一般不要开启采集方法返回值的机制，严重影响性能
profiler.recordResult=false

## 定义是否采集方法参数，方法参数中包含对象时，请自行提供对象的toString()方法
profiler.recordArgs=true

## 定义需要被监控的类及类方法信息，多个类用空格分隔
## 类的方法信息通过|追加在类路径后面，多个方法用逗号分隔，方法信息定义语法：
# * 拦截所有方法，还可以指定特殊的需要排除拦截的方法
# *~1 拦截所有方法，还可以指定特殊的需要排除拦截的方法
# *~0 不拦截所有方法，还可以指定特殊的需要拦截的方法
# methodA 拦截名称为methodA对应的方法
# methodB 拦截名称为methodB对应的方法
# methodB* 拦截名称以methodB开头的方法

# methodA~1 拦截名称为methodA对应的方法
# methodB~1 拦截名称为methodB对应的方法
# methodB*~1 拦截名称以methodB开头的方法

# methodA~0 不拦截名称为methodA对应的方法
# methodB~0 不拦截名称为methodB对应的方法
# methodB*~0 不拦截名称以methodB开头的方法
# 上面的定义可以任意组合定义
##
plugin.interceptor.classes=org.frameworkset.elasticsearch.client.ConfigRestClientUtil|*,discover~0 \
                           org.frameworkset.elasticsearch.client.RestClientUtil|*,discover~0
## 插件采集的链路日志类型：
## spanevent，上下文环境没有trace，丢弃日志数据，有trace则加入其中，日志被记录
## spantrace(默认值), 上下文环境没有trace，创建trace并记录日志数据，有trace则加入其中
##
plugin.interceptor.type=spantrace

##
# ALWAYS,
# BOUNDARY,
# INTERNAL
##
plugin.executionPolicy = BOUNDARY
## 插件定义完毕后，是否清空过程中产生的临时文件，true 清空 false 不清空
plugin.deleteFilesAfterGen=false

