configure(allprojects) { project ->
	group = PROJ_GROUP
	version = PROJ_VERSION

	apply plugin: "java"
	apply plugin: "maven-publish"
	apply plugin: "eclipse"
	apply plugin: "idea"
	apply plugin: "signing"
	apply plugin: "maven"
	eclipse {
		jdt {
			//if you want to alter the java versions (by default they are configured with gradle java plugin settings):
			sourceCompatibility = SOURCE_COMPILER_LEVEL
			targetCompatibility = TARGET_COMPILER_LEVEL
			//javaRuntimeName = "../../org.eclipse.jdt.launching.JRE_CONTAINER"

		}
	}

	tasks.withType(JavaCompile) {

		sourceCompatibility = SOURCE_COMPILER_LEVEL
		targetCompatibility = TARGET_COMPILER_LEVEL
		options.encoding = 'UTF-8'
	}

	tasks.withType(Javadoc) {
		sourceCompatibility = JAVADOC_SOURCE_LEVEL
		targetCompatibility = JAVADOC_COMPILER_LEVEL
		options.encoding = 'UTF-8'
		// disable the crazy super-strict doclint tool in Java 8
        // noinspection SpellCheckingInspection
		if (JavaVersion.current().isJava8Compatible()) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}

	task sourcesJar(type: Jar) {
		classifier = "sources"
		from sourceSets.main.allJava
	}

	task javaDocJar(type: Jar, dependsOn: javadoc) {
		classifier = "javadoc"
		from javadoc.destinationDir
	}
	artifacts {
		archives sourcesJar, javaDocJar
	}

	jar {
		manifest {
			attributes (
					'Implementation': version,
					'Specification-Version': version,
					'Implementation-Vendor': 'bbossgroups',
					'Implementation-ProductID': project.name,
					'Compile-Timestamp': new Date().format('yyyy-MM-dd HH:mm:ss'),
					'Compile-User': DEVELOPER_NAME
			)
		}
	}




	repositories {
		mavenLocal()
		 maven {
	        url "http://maven.aliyun.com/nexus/content/groups/public"
	    }
		 maven {
	        url "https://artifacts.elastic.co/maven"
	    } 
		mavenCentral()

	}
	if(project.getProperty('skipTest').equals("true"))
	{
		compileTestJava.enabled=false
		processTestResources.enabled=false
		testClasses.enabled = false
		test.enabled = false
	}

	sourceSets {
		main {
			java {
				srcDir 'src/main/java'

			}
			resources {
				srcDir 'src/main/resources'
				srcDir 'src/main/java'  exclude '**/*.java'
			}

		}
		test {
			java {
				srcDir 'src/test/java'

			}
			resources {
				srcDir 'src/test/resources'
				srcDir 'src/test/java'  exclude '**/*.java'
			}

		}

	}



	dependencies {
		testCompile 'junit:junit:4.12'
	
		compile(
				//fileTree(dir: '../lib', include: '**/*'),
				fileTree(dir: 'lib', include: '**/*'),

		)

	}



	task copyJarFiles(type: Sync,dependsOn:'install'){

		from jar.outputs
		into 'build/dist/'

	}


	task copyResourcesfiles(type: Sync )  {
		from fileTree(dir: 'src/test/resources')
		filteringCharset = 'UTF-8'
		into 'build/dist/resources'
	}

	task releaseVersion(type: Zip,dependsOn:['copyJarFiles','copyResourcesfiles']) {

		//appendix = 'wrapper'
		classifier = 'released'
		from 'build/dist/'

	}
}



